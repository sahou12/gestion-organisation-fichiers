from classifieur_ai import entra√Æner_classifieur
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
import joblib
import os

# Donn√©es enrichies
exemples = [
    ("Facture EDF du 15 avril 2023", "Facture"),
    ("Facture Amazon - Commande 12345", "Facture"),
    ("Facture mensuelle Internet Orange", "Facture"),
    ("Re√ßu de paiement de la taxe fonci√®re", "Facture"),
    ("Devis pour la r√©novation de cuisine", "Devis"),
    ("Proposition de devis - soci√©t√© BTP", "Devis"),
    ("Estimation du projet peinture", "Devis"),
    ("Offre tarifaire pour travaux √©lectriques", "Devis"),
    ("Rapport trimestriel des ventes", "Rapport"),
    ("Rapport de stage - entreprise L'Or√©al", "Rapport"),
    ("Analyse financi√®re annuelle", "Rapport"),
    ("Compte-rendu de r√©union du 23 mai", "Rapport"),
    ("R√©sum√© de biologie - chapitre 3", "Notes"),
    ("Fiche de r√©vision histoire-g√©o", "Notes"),
    ("Cours de macro√©conomie L1", "Notes"),
    ("Introduction aux probabilit√©s", "Notes"),
    ("Contrat de travail √† dur√©e d√©termin√©e", "Contrat"),
    ("Accord de location meubl√©e", "Contrat"),
    ("Conditions g√©n√©rales de vente", "Contrat"),
    ("Contrat d‚Äôassurance habitation", "Contrat"),
    ("Curriculum Vitae - Julie Dupont", "CV"),
    ("Mon CV 2024 - d√©veloppeur web", "CV"),
    ("Exp√©riences professionnelles et comp√©tences", "CV"),
    ("Profil LinkedIn export√©", "CV"),
    ("Lettre de motivation pour master RH", "Lettre"),
    ("Lettre de recommandation √©tudiant", "Lettre"),
    ("Lettre de d√©mission", "Lettre"),
    ("Lettre administrative - demande de logement", "Lettre"),
    ("Objet : relance de facture impay√©e", "Mail"),
    ("Message de suivi de candidature", "Mail"),
    ("Email de confirmation de rendez-vous", "Mail"),
    ("Bonjour, voici le compte rendu de la r√©union", "Mail"),
]

# S√©paration en donn√©es d'entra√Ænement et de test
textes, labels = zip(*exemples)
X_train, X_test, y_train, y_test = train_test_split(textes, labels, test_size=0.25, random_state=42)

# Entra√Ænement
vect = TfidfVectorizer()
X_train_vect = vect.fit_transform(X_train)
X_test_vect = vect.transform(X_test)

clf = LogisticRegression(max_iter=1000)
clf.fit(X_train_vect, y_train)

# Pr√©diction et affichage
y_pred = clf.predict(X_test_vect)
print("\nüìä Rapport de performance du mod√®le :\n")
print(classification_report(y_test, y_pred))

# Sauvegarde du mod√®le
os.makedirs("modeles", exist_ok=True)
joblib.dump(clf, "modeles/modele_clf.pkl")
joblib.dump(vect, "modeles/vectorizer.pkl")
print("\n‚úÖ Nouveau mod√®le sauvegard√© dans 'modeles/'")
